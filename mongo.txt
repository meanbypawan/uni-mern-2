Mongo Repair:-
 sudo rm /var/lib/mongodb/mongod.lock
 sudo mongod --dbpath /var/lib/mongodb/ --repair
 sudo mongod --dbpath /var/lib/mongodb/ --journal


MongoDB
  Database ----> Collections------> Record/Documents
  Creating database:-
  
  use ecommerce;
  listing database
  show dbs
  
  Creating collection
  db.createCollection("user")
  
  listing collection
  show collections
  Type of Collection
    a. capped
    b. uncapped
    
  db.createCollection("employee",{capped: true,size: 1000,max:10})  
  
  Inserting documents
  
  db.employee.insert({
     name: "W",
     salary: 123000,
     skill: "jquery"
  })
  db.employee.insert([{
    name: "C",
    salary: 150000,
    skill: "reactjs"
  },{
    name: "D",
    salary: 160000,
    skill: "angular"
  },{
    name: "G",
    salary: 190000,
    skill: "c"
  },{
    name: "H",
    salary: 75000,
    skill: "cpp"
  },{
    name: "K",
    salary: 195000,
    skill: "android"
  },
  {
    name: "I",
    salary: 250000,
    skill: "jsp"
  }]);
  -------------------------------------------------
  // select * from employee
  // select name,salary from employee;
  db.employee.find({},{name:1,salary:1})
  db.employee.find({},{name:1,salary:1,_id:0}).sort({name:1})
  
  // select * from employee limit 5
  db.employee.find({},{name:1,salary:1,_id:0}).sort({salary:-1}).limit(5)
  
  // select * from employee limit 3,5
  db.employee.find({},{name:1,salary:1,_id:0}).sort({salary:-1}).skip(3).limit(5)
  ---------------------------------------------------------
  // select * from employee where salary = 150000
  db.employee.find({salary: 150000},{_id:0})
  --------------------------------------------------
  $gt,$gte, $lt, $lte, $eq, $ne, $and, $or
  $group, $match, $lookup
  -----------------------------------------------------------
  select * from employee where salary > 100000
  db.employee.find({salary:{$gt:100000}},{_id:0})
  ---------------------------------------------------------
  select * from employee where salary >= 70000 and salary <= 130000
  db.employee.find({
    $and:[{salary:{$gte:70000}},{salary:{$lte:130000}}]
  })
  
  db.user.find({
    $and: [{email: ''},{password: ''}]
  })
  db.employee.find({
    $or:[{skill: 'java'},{skill: 'reactjs'}]
  })
  ---------------------------------------------------------------------------
  db.employee.find().sort({salary:-1}).limit(1).toArray()[0].salary
  
  db.employee.find({
    salary: db.employee.find().sort({salary:-1}).limit(1).toArray()[0].salary
  })
-------------------------------------------------------------------
	db.employee.find({
	  salary:{
		 $lt: db.employee.find().sort({salary:-1}).limit(1).toArray()[0].salary
	  }
	}).sort({salary:-1}).limit(1).toArray()[0].salary
	
	db.employee.find({
	  salary: db.employee.find({
	     salary: {
	      $lt: db.employee.find().sort({ salary: -1 }).limit(1).toArray()[0].salary
	    }
	    }).sort({ salary: -1 }).limit(1).toArray()[0].salary
	})
-----------------------------------------------------------------
   db.employee.update(
   {_id:ObjectId("66e4247d153efab293bcaff2")},
   {$set:{salary:130000, skill: 'css'}});
   
   db.employee.update(
   {salary:{$gte:170000}},
   {$set:{skill:'java'}},
   {multi: true})
   db.employee.update(
     {salary:{$gte:170000}},
     {$set: {batchNo: 1}},
     {multi: true}
   )
-------------------------------------------------
db.employee.update(
  {_id:ObjectId("66e42324153efab293bcafe9")},
  {$unset:{age:1}}
)
 -------------------------------
 category
 {
   slug: '',
   url: '',
   name: 'c1'
 } 
 product
 {
   title: '',
   price:43434,
   brand: '',
   category: 'c1'
 } 
 -----------------------------------
 aggregate pipe line
 Data ===> Filter===> Add new field===> Projection
 db.employee.find() ===> Data
 db.employee.aggregate([]); ===> Data
 db.employee.aggregate([
  {
    $match:{salary:{$gte:100000}}
  },
  {
    $project:{name:1,salary:1,_id:0}
  }
 ]) 
----------------
category {slug: 'beauty'}
product {category: 'beauty'}

db.category.aggregate([
   {
      $lookup:{
         from: "product",
         localField: "slug",
         foreignField: "category",
         as: "productDetails"
      }
   },
   {
     $match:{slug: "beauty"}
   }
])
------------------
db.employee.getIndexes()
db.employee.find({name: "X"}).explain("executionStats");
db.employee.createIndex({name: 1})
db.employee.dropIndex({name: 1})
----------------------------------------------------------------------------



express-Application<------Mongoose------>MongoDB

Hibernate (ORM Tool)
Object<------------------------> Database Table
-----------------------------------------------------------
ODM(Object Document Mapper) Tool
{} ------------------> document
--------------------------------------------------------------------
Backend API[REST API]

// Be A Programmer
// Firechat in android ==> Whatapp

E-commerce[Flipkart] ----> Database
  Web-application[Browser]
  Android Mobile [Flipkart Mobile] 
  IOS [IOS App]
-------------------------------------------------------
  Front-endApplication					BackendApplication
     ReactJs								 Node application
   client application<------API------->Server Application
                          Data
   
   XML(Tag based) {Extensible Markup Language}
   product {title:"A",price:100, brand: "B"}
   <product>
      <title>A</title>
      <price>100</price>
      <brand>B</brand>
   </product>
   JSON{Javascript Object Notation}
   {"title":"A","price":100, "brand": "B"}                       
---------------------------------------------------------------------------------
   API :-
     http://localhost:3000/category/list ===> [{},{}]
     http://localhost:3000/product/list ====>[{},{}]
-----------------------------------------------------------------------------------------
  user :-   /user/signup
           /user/signin
  category : /category/list
             /category/:id  --GET
             /category/:id  --GET
                      
  products :---- /product/list  --> GET
                /product/:id   --> GET
  -------------------------------------------------------
  cart :-     /cart/add-to-cart  ==> POST {userId:'', productId: ''} 
             /cart/remove-from-cart ==>POST {userId: '',productId:''}
             /cart/list/:userId ------> GET
             
  




  
  
  
  
  
  
  
  
  
  
  
  
  
